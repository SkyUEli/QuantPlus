{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from zipline import TradingAlgorithm\n",
      "from zipline.transforms import MovingAverage\n",
      "from zipline.utils.factory import load_from_yahoo\n",
      "from CAL.DataAPI import *\n",
      "\n",
      "from datetime import datetime\n",
      "import pytz\n",
      "import matplotlib.pyplot as plt\n",
      "\n",
      "class DualMovingAverage(TradingAlgorithm):\n",
      "    \"\"\"Dual Moving Average Crossover algorithm.\n",
      "\n",
      "    This algorithm buys apple once its short moving average crosses\n",
      "    its long moving average (indicating upwards momentum) and sells\n",
      "    its shares once the averages cross again (indicating downwards\n",
      "    momentum).\n",
      "\n",
      "    \"\"\"\n",
      "    def initialize(self, short_window=30, long_window=400):\n",
      "        # Add 2 mavg transforms, one with a long window, one\n",
      "        # with a short window.\n",
      "        self.add_transform(MovingAverage, 'short_mavg', ['price'],\n",
      "                           window_length=short_window)\n",
      "\n",
      "        self.add_transform(MovingAverage, 'long_mavg', ['price'],\n",
      "                           window_length=long_window)\n",
      "\n",
      "        # To keep track of whether we invested in the stock or not\n",
      "        self.invested = False\n",
      "\n",
      "    def handle_data(self, data):\n",
      "        short_mavg = data['closePrice'].short_mavg['price']\n",
      "        long_mavg = data['closePrice'].long_mavg['price']\n",
      "        buy = False\n",
      "        sell = False\n",
      "\n",
      "    # Has short mavg crossed long mavg?\n",
      "        if short_mavg > long_mavg and not self.invested:\n",
      "            self.order('closePrice', -100)\n",
      "            self.invested = True\n",
      "            buy = True\n",
      "        elif short_mavg < long_mavg and self.invested:\n",
      "            self.order('closePrice', -100)\n",
      "            self.invested = False\n",
      "            sell = True\n",
      "\n",
      "    # Record state variables. A column for each\n",
      "    # variable will be added to the performance\n",
      "    # DataFrame returned by .run()\n",
      "        self.record(short_mavg=short_mavg,\n",
      "                    long_mavg=long_mavg,\n",
      "                    buy=buy,\n",
      "                    sell=sell)\n",
      "\n",
      "# Load data\n",
      "start = datetime(1990, 1, 1, 0, 0, 0, 0, pytz.utc)\n",
      "end = datetime(2002, 1, 1, 0, 0, 0, 0, pytz.utc)\n",
      "#data = load_from_yahoo(stocks=['AAPL'], indexes={}, start=start,\n",
      "#                   end=end, adjusted=False)\n",
      "\n",
      "res = MarketDataGet(securityID = \"000002.XSHE\", \n",
      "                              fields = [\"shortNM\", \"openPrice\", \"highPrice\", \"lowPrice\", \"closePrice\", \"turnoverVolume\", \"turnoverValue\"], \n",
      "                              startDate = \"20000106\", \n",
      "                              endDate = \"20140110\",\n",
      "                              server = \"staging\")\n",
      "data = res[['openPrice', 'highPrice', 'lowPrice', 'closePrice']]\n",
      "\n",
      "# Run algorithm\n",
      "dma = DualMovingAverage()\n",
      "perf = dma.run(data)\n",
      "\n",
      "# Plot results\n",
      "fig = plt.figure()\n",
      "ax1 = fig.add_subplot(211,  ylabel='Price in $')\n",
      "data['closePrice'].plot(ax=ax1, color='r', lw=2.)\n",
      "perf[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)\n",
      "\n",
      "ax1.plot(perf.ix[perf.buy].index, perf.short_mavg[perf.buy],\n",
      "         '^', markersize=10, color='m')\n",
      "ax1.plot(perf.ix[perf.sell].index, perf.short_mavg[perf.sell],\n",
      "         'v', markersize=10, color='k')\n",
      "\n",
      "ax2 = fig.add_subplot(212, ylabel='Portfolio value in $')\n",
      "perf.portfolio_value.plot(ax=ax2, lw=2.)\n",
      "\n",
      "ax2.plot(perf.ix[perf.buy].index, perf.portfolio_value[perf.buy],\n",
      "         '^', markersize=10, color='m')\n",
      "ax2.plot(perf.ix[perf.sell].index, perf.portfolio_value[perf.sell],\n",
      "         'v', markersize=10, color='k')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "ImportError",
       "evalue": "No module named zipline",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-1-6e677d3251c0>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mzipline\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mTradingAlgorithm\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mzipline\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtransforms\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mMovingAverage\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mzipline\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfactory\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mload_from_yahoo\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mCAL\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDataAPI\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[1;33m*\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mImportError\u001b[0m: No module named zipline"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "res[:10]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "NameError",
       "evalue": "name 'res' is not defined",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-2-6fe7546eed69>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mres\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[1;31mNameError\u001b[0m: name 'res' is not defined"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ret = res[['closePrice']]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}