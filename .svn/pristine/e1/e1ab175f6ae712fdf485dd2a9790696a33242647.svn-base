{
 "metadata": {
  "name": "VanillaSwap"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import CAL"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Setup settlement date for nomral vanilla swap and its corresponding valuation date\n",
      "settlementDate = CAL.Date(31, CAL.January, 2013)\n",
      "fixingDays = 1\n",
      "print settlementDate\n",
      "todaysDate = CAL.NullCalendar().advance(settlementDate, -fixingDays, CAL.Days)\n",
      "CAL.Settings.instance().setEvaluationDate(todaysDate)\n",
      "print CAL.Settings.instance().evaluationDate"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "January 31st, 2013\n",
        "January 30th, 2013\n"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type = CAL.VanillaSwap.Payer"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "startDate = CAL.Date(31, CAL.January, 2013)\n",
      "swapTenor = CAL.Period(5, CAL.Years)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# To setup a vanilla swap which is exactly same as Shibor swap example\n",
      "fixedSchedule = CAL.Schedule(startDate, startDate + swapTenor, CAL.Period(6, CAL.Months), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "floatSchedule = CAL.Schedule(startDate, startDate + swapTenor, CAL.Period(3, CAL.Months), CAL.China(), CAL.ModifiedFollowing, CAL.ModifiedFollowing, CAL.DateGeneration.Backward, True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "discountTermStructure = CAL.RelinkableYieldTermStructureHandle()\n",
      "forecastTermStructure = CAL.RelinkableYieldTermStructureHandle()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "index = CAL.Shibor(CAL.Period(3, CAL.Months), forecastTermStructure)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "mySwap = CAL.VanillaSwap(type, 1000000, fixedSchedule, 0.05, CAL.Actual365Fixed(), floatSchedule, index, 0.0, CAL.Actual360())"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "discountingEngin = CAL.DiscountingSwapEngine(discountTermStructure)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "mySwap.setPricingEngine(discountingEngin)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Build up dummy curves both for forecasting and dsicouting\n",
      "flatCurve = CAL.FlatForward(todaysDate, 0.05, CAL.Actual365Fixed())"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Link discounting and forecasting handles to the dummy curve\n",
      "discountTermStructure.linkTo(flatCurve)\n",
      "forecastTermStructure.linkTo(flatCurve)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print mySwap.fairRate()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0.0506305633091\n"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print mySwap.NPV()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "2755.81174974\n"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 15
    }
   ],
   "metadata": {}
  }
 ]
}