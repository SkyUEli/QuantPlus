{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import CAL\n",
      "import datetime as dt\n",
      "import matplotlib.pyplot as plt"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "calendar = CAL.NullCalendar()\n",
      "settlementDate = CAL.Date(3, CAL.December, 2013)\n",
      "settlementDays = 1\n",
      "todayDate = calendar.advance(settlementDate, -settlementDays, CAL.Days)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Instruments for calibration, settle date Dec 3rd, 2013, Data source: \u540c\u82b1\u987a\n",
      "\n",
      "Quotes = [CAL.QuoteHandle(CAL.SimpleQuote(99.666)),   #110007\n",
      "          CAL.QuoteHandle(CAL.SimpleQuote(99.5762)),  #130014\n",
      "          CAL.QuoteHandle(CAL.SimpleQuote(97.4818)),  #100013\n",
      "          CAL.QuoteHandle(CAL.SimpleQuote(99.2252)),  #130021\n",
      "          CAL.QuoteHandle(CAL.SimpleQuote(95.5035)),  #100005\n",
      "          CAL.QuoteHandle(CAL.SimpleQuote(94.7672)),  #130013\n",
      "          CAL.QuoteHandle(CAL.SimpleQuote(94.1028)),  #130003\n",
      "          CAL.QuoteHandle(CAL.SimpleQuote(96.7499)),  #110002\n",
      "          CAL.QuoteHandle(CAL.SimpleQuote(92.5445)),  #120009\n",
      "          CAL.QuoteHandle(CAL.SimpleQuote(93.5482)),  #120021\n",
      "          CAL.QuoteHandle(CAL.SimpleQuote(97.3174))   #130018\n",
      "          ]\n",
      "\n",
      "Schedules = [CAL.Schedule(CAL.Date(10, CAL.March, 2011), CAL.Date(10, CAL.March, 2014), CAL.Period(1,CAL.Years), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ,CAL.Schedule(CAL.Date(4, CAL.July, 2013), CAL.Date(4, CAL.July, 2014), CAL.Period(1,CAL.Years), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ,CAL.Schedule(CAL.Date(20, CAL.May, 2010), CAL.Date(20, CAL.May, 2015), CAL.Period(1,CAL.Years), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ,CAL.Schedule(CAL.Date(21, CAL.October, 2013), CAL.Date(21, CAL.October, 2015), CAL.Period(1,CAL.Years), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ,CAL.Schedule(CAL.Date(11, CAL.March, 2010), CAL.Date(11, CAL.March, 2017), CAL.Period(1,CAL.Years), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ,CAL.Schedule(CAL.Date(30, CAL.May, 2013), CAL.Date(30, CAL.May, 2018), CAL.Period(1,CAL.Years), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ,CAL.Schedule(CAL.Date(24, CAL.January, 2013), CAL.Date(24, CAL.January, 2020), CAL.Period(1,CAL.Years), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ,CAL.Schedule(CAL.Date(20, CAL.January, 2011), CAL.Date(20, CAL.January, 2021), CAL.Period(6,CAL.Months), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ,CAL.Schedule(CAL.Date(24, CAL.May, 2012), CAL.Date(24, CAL.May, 2022), CAL.Period(6,CAL.Months), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ,CAL.Schedule(CAL.Date(13, CAL.December, 2012), CAL.Date(13, CAL.December, 2022), CAL.Period(6,CAL.Months), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ,CAL.Schedule(CAL.Date(22, CAL.August, 2013), CAL.Date(22, CAL.August, 2023), CAL.Period(6,CAL.Months), CAL.NullCalendar(), CAL.Unadjusted, CAL.Unadjusted, CAL.DateGeneration.Backward, False)\n",
      "             ]\n",
      "\n",
      "Coupons = [\n",
      "           [0.0322],\n",
      "           [0.0348],\n",
      "           [0.0238],\n",
      "           [0.0377],\n",
      "           [0.0292],\n",
      "           [0.0309],\n",
      "           [0.0342],\n",
      "           [0.0394],\n",
      "           [0.0336],\n",
      "           [0.0355],\n",
      "           [0.0408]\n",
      "           ]\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set up calibration instruments' objects\n",
      "bondHelpers = [CAL.FixedRateBondHelper(quote, 1, 100, schedule, coupon, CAL.ActualActualNoLeap()) for quote, schedule, coupon in zip(Quotes, Schedules, Coupons)]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Fit cubic splined zero curve to benchmark instruments\n",
      "bondTermStructure = CAL.PiecewiseCubicZero(settlementDate,bondHelpers, CAL.Actual365NoLeap())"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Test on the bechmark bond to see wether the calibration is successful or not\n",
      "discountingTermStructure = CAL.RelinkableYieldTermStructureHandle()\n",
      "bondEngine = CAL.DiscountingBondEngine(discountingTermStructure)\n",
      "testBond = CAL.FixedRateBond(1, 100, Schedules[8], Coupons[8], CAL.ActualActualNoLeap())\n",
      "testBond.setPricingEngine(bondEngine)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "discountingTermStructure.linkTo(bondTermStructure)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "testBond.cleanPrice()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "92.54449999938521"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Finally check the pricing is consistent\n",
      "assert(abs(testBond.cleanPrice() - Quotes[8].value())<1e-6)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Graph the curve to see the big picture\n",
      "forwardStart = settlementDate\n",
      "forwardPoints = [forwardStart]\n",
      "for i in xrange(1, 35):\n",
      "    forwardPoints.append(forwardStart + CAL.Period(3*i, CAL.Months))\n",
      "\n",
      "cubicInterpZeroRates = [0.0]\n",
      "\n",
      "for i, date in enumerate(forwardPoints):\n",
      "    if i != 0:\n",
      "        cubicInterpZeroRates.append(bondTermStructure.zeroRate(\n",
      "                                                          forwardPoints[i],\n",
      "                                                          CAL.Actual365NoLeap(),\n",
      "                                                          CAL.Continuous).rate())"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Transform CAL.Date to date type in python standard library\n",
      "# Currently matplolib cant't recognize CAL.Date\n",
      "standardDates = []\n",
      "for date in forwardPoints:\n",
      "    standardDates.append(dt.date(date.year(), date.month(), date.dayOfMonth()))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "p1, = plt.plot(standardDates, cubicInterpZeroRates, 'r', label = 'Cubic Zero')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.legend([p1], ['Cubic'], loc =1)\n",
      "plt.ylim(0.03,0.07)\n",
      "plt.title('Zero rates bond curve with cubic spline')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "<matplotlib.text.Text at 0x826cc10>"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    }
   ],
   "metadata": {}
  }
 ]
}