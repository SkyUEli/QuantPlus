{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from CAL import *\n",
      "from math import *"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 74
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Basic parameters\n",
      "strike = 100.0\n",
      "r = 0.05\n",
      "d = 0.02\n",
      "t = 2.0\n",
      "sigma = 0.5\n",
      "S0 = 95.0"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 75
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Black scholes value & greeks\n",
      "forward = S0 * exp((r -d)*t)\n",
      "stdev = sigma * sqrt(t)\n",
      "payoff = PlainVanillaPayoff(Option.Call, strike)\n",
      "discount = exp(-r*t)\n",
      "bsCalculator = BlackCalculator(payoff, forward, stdev, discount)\n",
      "print \"Black-Scholse-Merton models for Vanilla Call\"\n",
      "print \"%-10s%s%15.6f\" % (\"NPV\" , \":\", bsCalculator.value())\n",
      "print \"%-10s%s%15.6f\" % (\"Delta\", \":\" , bsCalculator.delta(S0))\n",
      "print \"%-10s%s%15.6f\" % (\"Gamma\", \":\" , bsCalculator.gamma(S0))\n",
      "print \"%-10s%s%15.6f\" % (\"Vega\", \":\" , bsCalculator.vega(t))\n",
      "print \"%-10s%s%15.6f\" % (\"Elasticity\", \":\" , bsCalculator.elasticity(S0))\n",
      "print \"%-10s%s%15.6f\" % (\"Rho\", \":\" , bsCalculator.rho(t))\n",
      "print \"%-10s%s%15.6f\" % (\"Div Rho\", \":\" , bsCalculator.dividendRho(t))\n",
      "print \"%-10s%s%15.6f\" % (\"Theta\", \":\" , bsCalculator.theta(S0, t))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Black-Scholse-Merton models for Vanilla Call\n",
        "NPV       :      25.509821\n",
        "Delta     :       0.617564\n",
        "Gamma     :       0.005337\n",
        "Vega      :      48.162600\n",
        "Elasticity:       2.299844\n",
        "Rho       :      66.317591\n",
        "Div Rho   :    -117.337233\n",
        "Theta     :      -6.504892\n"
       ]
      }
     ],
     "prompt_number": 76
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Do the benchmark test for the performance\n",
      "\n",
      "def doTheJob():\n",
      "    payoff = PlainVanillaPayoff(Option.Call, strike)\n",
      "    forward = S0 * exp((r -d)*t)\n",
      "    stdev = sigma * sqrt(t)\n",
      "    discount = exp(-r*t)\n",
      "    bsCalculator = BlackCalculator(payoff, forward, stdev, discount)\n",
      "    \n",
      "    bsCalculator.value()\n",
      "    bsCalculator.delta(S0)\n",
      "    bsCalculator.gamma(S0)\n",
      "    bsCalculator.vega(t)\n",
      "    bsCalculator.rho(t)\n",
      "    bsCalculator.dividendRho(t)\n",
      "    bsCalculator.theta(S0, t)\n",
      "    "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 77
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%timeit doTheJob()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "100000 loops, best of 3: 13 \u00b5s per loop\n"
       ]
      }
     ],
     "prompt_number": 78
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Do a whole calculation in Python\n",
      "# To see the performance in CAL comaring with handwritten Python code\n",
      "# Won't use scipy.stats.norm here due to its very low speed\n",
      "\n",
      "def erfcc(x):\n",
      "    \"\"\"Complementary error function.\"\"\"\n",
      "    z = abs(x)\n",
      "    t = 1. / (1. + 0.5*z)\n",
      "    r = t * exp(-z*z-1.26551223+t*(1.00002368+t*(.37409196+\n",
      "    \tt*(.09678418+t*(-.18628806+t*(.27886807+\n",
      "    \tt*(-1.13520398+t*(1.48851587+t*(-.82215223+\n",
      "    \tt*.17087277)))))))))\n",
      "    if (x >= 0.):\n",
      "    \treturn r\n",
      "    else:\n",
      "    \treturn 2. - r\n",
      "\n",
      "def ncdf(x):\n",
      "    return 1. - 0.5*erfcc(x/(2**0.5))\n",
      "\n",
      "def doCalculationInPython():\n",
      "    d1 = (log(S0/strike) + (r - d + 0.5 * sigma * sigma) * t) / sqrt(t) / sigma\n",
      "    d2 = d1 - sqrt(t) * sigma\n",
      "    value = S0 * exp(-d*t) *ncdf(d1) - strike * exp(-r*t) * ncdf(d2)\n",
      "    delta = exp(-d*t) * ncdf(d1) "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 79
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%timeit doCalculationInPython()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "100000 loops, best of 3: 6.71 \u00b5s per loop\n"
       ]
      }
     ],
     "prompt_number": 80
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "doCalculationInPython()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 81
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "BlackCalculator?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 82
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "bsCalculator.delta?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 84
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "value"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}