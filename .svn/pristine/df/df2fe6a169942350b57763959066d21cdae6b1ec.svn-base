{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import CAL\n",
      "import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Build the sample curve to build\n",
      "\n",
      "npvDate = CAL.Date(16,1,2014)\n",
      "startDate = CAL.Date(17,1,2014)\n",
      "CAL.Settings.instance().setEvaluationDate(npvDate)\n",
      "shiborIndex = CAL.Shibor(CAL.Period(3, CAL.Months))\n",
      "\n",
      "quotesHandle = []\n",
      "for i in xrange(1,11):\n",
      "    simpleQuote = CAL.SimpleQuote(0.05)\n",
      "    handle = CAL.QuoteHandle(simpleQuote)\n",
      "    quotesHandle.append(handle)\n",
      "\n",
      "rateHelpers = []\n",
      "for i in xrange(1, len(quotesHandle)+1):\n",
      "    rateHelper = CAL.ShiborSwapRateHelper(quotesHandle[i-1], CAL.Period(i, CAL.Years), CAL.Quarterly, shiborIndex)\n",
      "    rateHelpers.append(rateHelper)\n",
      "    \n",
      "myCurve = CAL.PiecewiseLogLinearDiscount(npvDate, rateHelpers, CAL.Actual360())\n",
      "yieldHandle = CAL.RelinkableYieldTermStructureHandle(myCurve)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# try risk analysi on a benchmart trade\n",
      "testCase1 = CAL.ShiborSwap(CAL.VanillaSwap.Payer, 100.0, startDate, CAL.Period(5, CAL.Years), CAL.Period(3, CAL.Months), 0.05, CAL.Period(3, CAL.Months), yieldHandle) \n",
      "\n",
      "discountEngine = CAL.DiscountingSwapEngine(yieldHandle)\n",
      "testCase1.setPricingEngine(discountEngine)\n",
      "riskReport = CAL.bucketAnalysis(quotesHandle, [testCase1], [100.0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "result = CAL.bucketAnalysis(quotesHandle, [testCase1], [1.0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "delta = result[0]\n",
      "gamma = result[1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Print out curve deltas\n",
      "pprint.pprint(delta)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(-2.5702107109282224e-07,\n",
        " 0.0,\n",
        " -2.4868995751603507e-10,\n",
        " 8.881784197001252e-11,\n",
        " 440.1338814543898,\n",
        " 0.0,\n",
        " 0.0,\n",
        " 0.0,\n",
        " 0.0,\n",
        " 0.0)\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Print out curve gammas\n",
      "pprint.pprint(gamma)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(0.008785505656305759,\n",
        " 0.00022026824808563106,\n",
        " 0.00021600499167107046,\n",
        " 0.000219912976717751,\n",
        " -539.9829280605672,\n",
        " 0.0,\n",
        " 0.0,\n",
        " 0.0,\n",
        " 0.0,\n",
        " 0.0)\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "CAL.bucketAnalysis?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 8
    }
   ],
   "metadata": {}
  }
 ]
}