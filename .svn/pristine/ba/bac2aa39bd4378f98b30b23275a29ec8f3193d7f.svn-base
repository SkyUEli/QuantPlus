{
 "metadata": {
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from CAL import *\n",
      "import datetime"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 48
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "starttime = datetime.datetime.now()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dc = Actual360()\n",
      "today = Date.todaysDate()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 50
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "spot = SimpleQuote(100.0)\n",
      "qRate = SimpleQuote(0.04)\n",
      "qTS = FlatForward(today, QuoteHandle(qRate), dc)\n",
      "rRate = SimpleQuote(0.08)\n",
      "rTS = FlatForward(today, QuoteHandle(rRate), dc)\n",
      "vol = SimpleQuote(0.25)\n",
      "volTS = BlackConstantVol(today, TARGET(), QuoteHandle(vol), dc)\n",
      "strike = 100.0\n",
      "optionType = Option.Put"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 51
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "barrierType = Barrier.UpOut\n",
      "barrier = 105.0\n",
      "rebate = 0.0\n",
      "t = 0.5\n",
      "exDate = today + int(t*360+0.5)\n",
      "exercise = EuropeanExercise(exDate)\n",
      "payoff = PlainVanillaPayoff(optionType, strike)\n",
      "stochProcess = BlackScholesMertonProcess(QuoteHandle(spot), \n",
      "                                         YieldTermStructureHandle(qTS),\n",
      "                                         YieldTermStructureHandle(rTS),\n",
      "                                         BlackVolTermStructureHandle(volTS))\n",
      "barrierOption = BarrierOption(barrierType, barrier, rebate, payoff, exercise)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 52
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Pricing with Analytical formula\n",
      "engine = AnalyticBarrierEngine(stochProcess)\n",
      "barrierOption.setPricingEngine(engine)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 53
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "calculated = barrierOption.NPV();\n",
      "print \"\\nPricing with Analytical Formula\"\n",
      "print \"%-15s%15.4f\" %(\"NPV : \", calculated)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Pricing with Analytical Formula\n",
        "NPV :                   3.1479\n"
       ]
      }
     ],
     "prompt_number": 54
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Pricing with Monte Carlo (Low Discrepancy)\n",
      "engine = MCBarrierEngine(stochProcess, \n",
      "                         \"lowdiscrepancy\", \n",
      "                         timeStepsPerYear = 12, \n",
      "                         requiredSamples = 131071, \n",
      "                         maxSamples = 104857500, \n",
      "                         requiredTolerance = 0.02,\n",
      "                         seed = 5)\n",
      "barrierOption.setPricingEngine(engine)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 55
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "calculated = barrierOption.NPV();\n",
      "print \"\\nPricing with Monte Carlo (Low Discrepancy)\"\n",
      "print \"%-15s%15.4f\" %(\"NPV : \", calculated)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Pricing with Monte Carlo (Low Discrepancy)\n",
        "NPV :                   3.1456\n"
       ]
      }
     ],
     "prompt_number": 56
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Pricing with perturbative engine\n",
      "order = 0\n",
      "zeroGamma = False\n",
      "engine = PerturbativeBarrierOptionEngine(stochProcess, order, zeroGamma)\n",
      "barrierOption.setPricingEngine(engine)\n",
      "calculated = barrierOption.NPV();\n",
      "print \"\\nPricing with Perturbative\"\n",
      "print \"%-15s%15.4f\" %(\"NPV : \", calculated)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Pricing with Perturbative\n",
        "NPV :                   3.1479\n"
       ]
      }
     ],
     "prompt_number": 57
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Pricing with local volatility and Heston FD engines for barrier options...\n",
      "settlementDate = Date(5, July, 2002)\n",
      "Settings.instance().setEvaluationDate(settlementDate)\n",
      "dayCounter = Actual365Fixed()\n",
      "calendar = TARGET()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 58
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t = [ 13, 41, 75, 165, 256, 345, 524, 703 ]\n",
      "r = [ 0.0357,0.0349,0.0341,0.0355,0.0359,0.0368,0.0386,0.0401 ]\n",
      "rates = [0.0357]\n",
      "dates = [settlementDate]\n",
      "for i in xrange(8):\n",
      "    rates.append(r[i])\n",
      "    dates.append(settlementDate + t[i])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 59
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rTS = YieldTermStructureHandle(LinearZeroCurve(dates, rates, dayCounter))\n",
      "qTS = YieldTermStructureHandle(FlatForward(settlementDate, 0.0, dayCounter))\n",
      "s0 = QuoteHandle(SimpleQuote(4500.0))\n",
      "strikes = [ 100 ,500 ,2000,3400,3600,3800,4000,4200,4400,4500,\n",
      "                   4600,4800,5000,5200,5400,5600,7500,10000,20000,30000 ]\n",
      "v = [ 1.015873, 1.015873, 1.015873, 0.89729, 0.796493, 0.730914, 0.631335, 0.568895,\n",
      "        0.711309, 0.711309, 0.711309, 0.641309, 0.635593, 0.583653, 0.508045, 0.463182,\n",
      "        0.516034, 0.500534, 0.500534, 0.500534, 0.448706, 0.416661, 0.375470, 0.353442,\n",
      "        0.516034, 0.482263, 0.447713, 0.387703, 0.355064, 0.337438, 0.316966, 0.306859,\n",
      "        0.497587, 0.464373, 0.430764, 0.374052, 0.344336, 0.328607, 0.310619, 0.301865,\n",
      "        0.479511, 0.446815, 0.414194, 0.361010, 0.334204, 0.320301, 0.304664, 0.297180,\n",
      "        0.461866, 0.429645, 0.398092, 0.348638, 0.324680, 0.312512, 0.299082, 0.292785,\n",
      "        0.444801, 0.413014, 0.382634, 0.337026, 0.315788, 0.305239, 0.293855, 0.288660,\n",
      "        0.428604, 0.397219, 0.368109, 0.326282, 0.307555, 0.298483, 0.288972, 0.284791,\n",
      "        0.420971, 0.389782, 0.361317, 0.321274, 0.303697, 0.295302, 0.286655, 0.282948,\n",
      "        0.413749, 0.382754, 0.354917, 0.316532, 0.300016, 0.292251, 0.284420, 0.281164,\n",
      "        0.400889, 0.370272, 0.343525, 0.307904, 0.293204, 0.286549, 0.280189, 0.277767,\n",
      "        0.390685, 0.360399, 0.334344, 0.300507, 0.287149, 0.281380, 0.276271, 0.274588,\n",
      "        0.383477, 0.353434, 0.327580, 0.294408, 0.281867, 0.276746, 0.272655, 0.271617,\n",
      "        0.379106, 0.349214, 0.323160, 0.289618, 0.277362, 0.272641, 0.269332, 0.268846,\n",
      "        0.377073, 0.347258, 0.320776, 0.286077, 0.273617, 0.269057, 0.266293, 0.266265,\n",
      "        0.399925, 0.369232, 0.338895, 0.289042, 0.265509, 0.255589, 0.249308, 0.249665,\n",
      "        0.423432, 0.406891, 0.373720, 0.314667, 0.281009, 0.263281, 0.246451, 0.242166,\n",
      "        0.453704, 0.453704, 0.453704, 0.381255, 0.334578, 0.305527, 0.268909, 0.251367,\n",
      "        0.517748, 0.517748, 0.517748, 0.416577, 0.364770, 0.331595, 0.287423, 0.264285 ]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 60
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "blackVolMatrix = Matrix(len(strikes), len(dates)-1)\n",
      "for i in xrange(len(strikes)):\n",
      "    for j in xrange(1, len(dates)):\n",
      "        blackVolMatrix[i][j-1] = v[i*(len(dates)-1)+j-1];"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 61
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "volTS = BlackVarianceSurface(settlementDate, calendar, dates[1:], strikes, blackVolMatrix, dayCounter)\n",
      "volTS.setInterpolation(\"bicubic\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 62
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "localVolProcess = BlackScholesMertonProcess(s0, qTS, rTS, BlackVolTermStructureHandle(volTS))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 63
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Heston parameters\n",
      "v0 = 0.195662\n",
      "kappa = 5.6628\n",
      "theta = 0.0745911\n",
      "sigma = 1.1619\n",
      "rho = -0.511493\n",
      "\n",
      "hestonProcess = HestonProcess(rTS, qTS, s0, v0, kappa, theta, sigma, rho)\n",
      "hestonModel = HestonModel(hestonProcess)\n",
      "fdHestonEngine = FdHestonBarrierEngine(hestonModel, 100, 400, 50);"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 64
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Calculate Heston PV\n",
      "strike = s0.value()\n",
      "barrier = 3000.0\n",
      "rebate = 100.0\n",
      "exDate  = settlementDate + Period(20, Months)\n",
      "payoff = PlainVanillaPayoff(Option.Put, strike)\n",
      "exercise = EuropeanExercise(exDate)\n",
      "barrierOption = BarrierOption(Barrier.DownOut, barrier, rebate, payoff, exercise)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 65
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "barrierOption.setPricingEngine(fdHestonEngine)\n",
      "expectedHestonNPV = 111.5\n",
      "calculatedHestonNPV = barrierOption.NPV();"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 66
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Calculate Local vol PV\n",
      "fdLocalVolEngine = FdBlackScholesBarrierEngine(localVolProcess, 100, 400, 0,\n",
      "                                                 FdmSchemeDesc.Hundsdorfer(), \n",
      "                                                 True, 0.35);"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 67
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "barrierOption.setPricingEngine(fdLocalVolEngine)\n",
      "expectedLocalVolNPV = 132.8\n",
      "calculatedLocalVolNPV = barrierOption.NPV()\n",
      "\n",
      "print \"\\nPricing with stochastic vol/local vol models\"\n",
      "print \"%-15s%15.4f\" %(\"Local Vol : \", calculatedLocalVolNPV)\n",
      "print \"%-15s%15.4f\" %(\"Heston : \", calculatedHestonNPV)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Pricing with stochastic vol/local vol models\n",
        "Local Vol :           132.7829\n",
        "Heston :              111.3668\n"
       ]
      }
     ],
     "prompt_number": 68
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}