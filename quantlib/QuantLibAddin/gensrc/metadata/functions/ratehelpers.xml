<Category name='ratehelpers'>
  <description>functions to construct and use RateHelper objects.</description>
  <displayName>RateHelper</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/ratehelpers.hpp</include>
    <include>qlo/indexes/swapindex.hpp</include>
    <include>qlo/schedule.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/yieldtermstructures.hpp</include>
    <include>qlo/indexes/ibor/euribor.hpp</include>
    <include>qlo/indexes/ibor/libor.hpp</include>
    <include>ql/indexes/swapindex.hpp</include>
    <include>ql/instruments/bonds/fixedratebond.hpp</include>
    <include>ql/indexes/ibor/euribor.hpp</include>
    <include>ql/indexes/ibor/shibor.h</include>
    <include>ql/indexes/ibor/repochina.h</include>
    <include>ql/termstructures/yieldtermstructure.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/ratehelpers.hpp</include>
    <include>qlo/indexes/swapindex.hpp</include>
    <include>qlo/schedule.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/yieldtermstructures.hpp</include>
    <include>qlo/indexes/ibor/euribor.hpp</include>
    <include>qlo/indexes/ibor/libor.hpp</include>
    <include>ql/termstructures/yield/ratehelpers.hpp</include>
    <include>ql/indexes/swapindex.hpp</include>
    <include>ql/instruments/bonds/fixedratebond.hpp</include>
    <include>ql/indexes/ibor/euribor.hpp</include>
    <include>ql/indexes/ibor/shibor.h</include>
    <include>ql/indexes/ibor/repochina.h</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2005, 2006 Eric Ehlers
    Copyright (C) 2006, 2007, 2008, 2009 Ferdinando Ametrano
    Copyright (C) 2005 Plamen Neykov
    Copyright (C) 2005 Aurelien Chanudet
    Copyright (C) 2013 Cheng Li
  </copyright>
  <Functions>

    <Member name='CALRateHelperEarliestDate' type='QuantLib::RateHelper'>
      <description>returns the earliest date for the given RateHelper object.</description>
      <libraryFunction>earliestDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='CALRateHelperLatestDate' type='QuantLib::RateHelper'>
      <description>returns the latest date for the given RateHelper object.</description>
      <libraryFunction>latestDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='CALRateHelperQuoteValue' type='QuantLib::RateHelper'>
      <description>returns the value of the Quote wrapped in the given RateHelper object.</description>
      <libraryFunction>quote()->value</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='CALRateHelperQuoteIsValid' type='QuantLib::RateHelper'>
      <description>returns the isValid boolean of the Quote wrapped in the given RateHelper object.</description>
      <libraryFunction>quote()->isValid</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='CALRateHelperImpliedQuote' type='QuantLib::RateHelper'>
      <description>returns the curve implied quote of the given RateHelper object.</description>
      <libraryFunction>impliedQuote</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='CALRateHelperQuoteError' type='QuantLib::RateHelper'>
      <description>returns the error between the curve implied quote and the value of the Quote wrapped in the given RateHelper object.</description>
      <libraryFunction>quoteError</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='CALDepositRateHelper'>
      <libraryFunction>DepositRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Rate' exampleValue='0.036565'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>deposit quote.</description>
          </Parameter>
          <Parameter name='IborIndex' exampleValue='Euribor6M'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>IborIndex object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALDepositRateHelper2'>
      <libraryFunction>DepositRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Rate' exampleValue='0.036565'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>deposit quote.</description>
          </Parameter>
          <Parameter name='Tenor' exampleValue='6M'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>deposit length (e.g. 3M for three months).</description>
          </Parameter>
          <Parameter name='FixingDays' exampleValue='2'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2).</description>
          </Parameter>
          <Parameter name='Calendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET).</description>
          </Parameter>
          <Parameter name='Convention' exampleValue='Modified Following'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>business day convention (e.g. Modified Following).</description>
          </Parameter>
          <Parameter name='EndOfMonth' exampleValue='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>End of Month rule (TRUE for end of month to end of month termination date, FALSE otherwise).</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/360'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>DayCounter ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALSwapRateHelper'>
      <libraryFunction>SwapRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Rate' exampleValue='0.042322'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>quote.</description>
          </Parameter>
          <Parameter name='SwapIndex' exampleValue='EuriborSwapIsdaFixA10Y'>
            <type>QuantLib::SwapIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>SwapIndex object ID.</description>
          </Parameter>
          <Parameter name='Spread' exampleValue='0.0'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>floating leg spread.</description>
          </Parameter>
          <Parameter name='ForwardStart' exampleValue='"0D"'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>forward start period.</description>
          </Parameter>
          <Parameter name='DiscountingCurve' exampleValue='EURYC' default='""'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALSwapRateHelper2'>
      <libraryFunction>SwapRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Rate' exampleValue='0.042322'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>quote.</description>
          </Parameter>
          <Parameter name='Tenor' exampleValue='10Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>swap length (e.g. 5Y for five years).</description>
          </Parameter>
          <Parameter name='Calendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET).</description>
          </Parameter>
          <Parameter name='FixedLegFrequency' exampleValue='Annual'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>fixed leg frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='FixedLegConvention' exampleValue='ModifiedFollowing'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>fixed leg convention (e.g. Unadjusted).</description>
          </Parameter>
          <Parameter name='FixedLegDayCounter' exampleValue='30/360 (Bond Basis)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360).</description>
          </Parameter>
          <Parameter name='IborIndex' exampleValue='Euribor6M'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>floating leg IborIndex object ID.</description>
          </Parameter>
          <Parameter name='Spread' exampleValue='0.0'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>floating leg spread.</description>
          </Parameter>
          <Parameter name='ForwardStart' exampleValue='"0D"'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>forward start period.</description>
          </Parameter>
          <Parameter name='DiscountingCurve' exampleValue='EURYC' default='""'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALShiborSwapRateHelper'>
      <libraryFunction>ShiborSwapRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Rate' exampleValue='0.042322'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>rate quote.</description>
          </Parameter>
          <Parameter name='SwapTenor' exampleValue='10Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>shibor swap length (e.g. 5Y for five years).</description>
          </Parameter>
          <Parameter name='FixedLegFrequency' exampleValue='Annual'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>fixed leg frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='ShiborIndex' exampleValue='Shibor'>
            <type>QuantLib::Shibor</type>
            <tensorRank>scalar</tensorRank>
            <description>floating leg ShiborIndex object ID.</description>
          </Parameter>
          <Parameter name='ForwardStart' exampleValue='"0D"'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>forward start period.</description>
          </Parameter>
          <Parameter name='DiscountingCurve' exampleValue='EURYC' default='""'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALIBFRSwapRateHelper'>
      <libraryFunction>IBFRSwapRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Rate' exampleValue='0.042322'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>rate quote.</description>
          </Parameter>
          <Parameter name='SwapTenor' exampleValue='10Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>shibor swap length (e.g. 5Y for five years).</description>
          </Parameter>
          <Parameter name='PayFrequency' exampleValue='Annual'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='RepoIndex'>
            <type>QuantLib::RepoChina</type>
            <tensorRank>scalar</tensorRank>
            <description>floating leg index object ID.</description>
          </Parameter>
          <Parameter name='RateSpread' exampleValue='0.0'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>rate spread quote.</description>
          </Parameter>
          <Parameter name='ForwardStart' exampleValue='"0D"'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>forward start period.</description>
          </Parameter>
          <Parameter name='DiscountingCurve' exampleValue='EURYC' default='""'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='CALSwapRateHelperSpread' type='QuantLib::SwapRateHelper'>
      <description>returns the spread for the given SwapRateHelper object.</description>
      <libraryFunction>spread</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
	<!--SupportedPlatform name='Calc'/-->
	<!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Spread</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='CALSwapRateHelperForwardStart' type='QuantLib::SwapRateHelper'>
      <description>returns the forward start period for the given SwapRateHelper object.</description>
      <libraryFunction>forwardStart</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Period</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='CALOISRateHelper'>
      <libraryFunction>OISRateHelper</libraryFunction>
      <SupportedPlatforms>
        SupportedPlatform name='Excel' calcInWizard='false'/
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='SettlDays' exampleValue='2'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>swap settlement days.</description>
          </Parameter>
          <Parameter name='Tenor' exampleValue='10Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>swap length (e.g. 5Y for five years).</description>
          </Parameter>
          <Parameter name='FixedRate' exampleValue='0.00423'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>quote.</description>
          </Parameter>
          <Parameter name='ONIndex' exampleValue='Eonia'>
            <type>QuantLib::OvernightIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>floating leg OvernightIndex object ID.</description>
          </Parameter>
          <Parameter name='DiscountingCurve' exampleValue='EURYC' default='""'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALDatedOISRateHelper'>
      <libraryFunction>DatedOISRateHelper</libraryFunction>
      <SupportedPlatforms>
        SupportedPlatform name='Excel' calcInWizard='false'/
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='StartDate' exampleValue='39000'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>swap start date.</description>
          </Parameter>
          <Parameter name='EndDate' exampleValue='40000'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>swap end date.</description>
          </Parameter>
          <Parameter name='FixedRate' exampleValue='0.00423'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>quote.</description>
          </Parameter>
          <Parameter name='ONIndex' exampleValue='Eonia'>
            <type>QuantLib::OvernightIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>floating leg OvernightIndex object ID.</description>
          </Parameter>
          <Parameter name='DiscountingCurve' exampleValue='EURYC' default='""'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALFraRateHelper'>
      <libraryFunction>FraRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Rate' exampleValue='0.041234'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>quote.</description>
          </Parameter>
          <Parameter name='PeriodToStart' exampleValue='3M'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Period to start date.</description>
          </Parameter>
          <Parameter name='IborIndex' exampleValue='Euribor6M'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>IborIndex object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALFraRateHelper2'>
      <libraryFunction>FraRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Rate' exampleValue='0.041234'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>quote.</description>
          </Parameter>
          <Parameter name='PeriodToStart' exampleValue='3M'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Period to start date.</description>
          </Parameter>
          <Parameter name='LengthInMonths' exampleValue='9'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>months to end.</description>
          </Parameter>
          <Parameter name='FixingDays' exampleValue='2'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2).</description>
          </Parameter>
          <Parameter name='Calendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET).</description>
          </Parameter>
          <Parameter name='Convention' exampleValue='ModifiedFollowing'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>business day convention (e.g. Modified Following).</description>
          </Parameter>
          <Parameter name='EndOfMonth' exampleValue='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>End of Month rule (TRUE for end of month to end of month termination date, FALSE otherwise).</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/360'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>DayCounter ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALBondHelper'>
      <libraryFunction>BondHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='CleanPrice' exampleValue='100.4332'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>cleanPrice.</description>
          </Parameter>
          <Parameter name='Bond' exampleValue='DE0003088704'>
            <type>QuantLib::Bond</type>
            <tensorRank>scalar</tensorRank>
            <description>Bond object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALFixedRateBondHelper'>
      <libraryFunction>FixedRateBondHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='CleanPrice' exampleValue='100.4332'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>cleanPrice.</description>
          </Parameter>
          <Parameter name='SettlementDays' exampleValue='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount.</description>
          </Parameter>
          <Parameter name='ScheduleID'>
            <type>QuantLib::Schedule</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID.</description>
          </Parameter>
          <Parameter name='Coupons' exampleValue='0.04'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>coupon fixed rates.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment DayCounter ID.</description>
          </Parameter>
          <Parameter name='PaymentBDC' default='"Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention.</description>
          </Parameter>
          <Parameter name='Redemption' default='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>redemption value.</description>
          </Parameter>
          <Parameter name='IssueDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALCTBZeroBondHelper'>
      <libraryFunction>CTBZeroBondHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='CleanPrice' exampleValue='100.4332'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>cleanPrice.</description>
          </Parameter>
          <Parameter name='SettlementDays' exampleValue='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='Calendar' exampleValue='"CHINA"'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>bond calendar for use.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount.</description>
          </Parameter>
          <Parameter name='IssuePrice' exampleValue='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the price when the bond issued.</description>
          </Parameter>
          <Parameter name='IssueDate' exampleValue='41590'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>the date when the bond issued.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/Actual (No Leap)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment DayCounter ID.</description>
          </Parameter>
          <Parameter name='MaturityDate' exampleValue='41590'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>the date when the bond matures.</description>
          </Parameter>
          <Parameter name='PaymentBDC' default='"Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention.</description>
          </Parameter>
          <Parameter name='Redemption' default='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>redemption value.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALCTBFixedBondHelper'>
      <libraryFunction>CTBFixedBondHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='CleanPrice' exampleValue='100.4332'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>cleanPrice.</description>
          </Parameter>
          <Parameter name='IssueDate' exampleValue='41590'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>the date when the bond issued.</description>
          </Parameter>
          <Parameter name='SettlementDays' exampleValue='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount.</description>
          </Parameter>
          <Parameter name='Start' exampleValue='41590'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>the date when the bond starts accruing.</description>
          </Parameter>
          <Parameter name='Maturity' exampleValue='41590'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>the date when the bond matures.</description>
          </Parameter>
          <Parameter name='Tenor' exampleValue='"3M"'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>the bonds accrued period length.</description>
          </Parameter>
          <Parameter name='Coupons' exampleValue='0.04'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>coupon fixed rates.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (No Leap)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment DayCounter ID.</description>
          </Parameter>
          <Parameter name='EndOfMonth' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>end of month convention.</description>
          </Parameter>
          <Parameter name='Calendar' default='"NullCalendar"'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>date generation calendar.</description>
          </Parameter>
          <Parameter name='PaymentCalendar' default='"CHINA"'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment calendar.</description>
          </Parameter>
          <Parameter name='Convention' default='"Unadjusted"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>accrual dates business day convention.</description>
          </Parameter>
          <Parameter name='GenRule' default='"Backward"'>
            <type>QuantLib::DateGeneration::Rule</type>
            <tensorRank>scalar</tensorRank>
            <description>Date generation rule (Backward, Forward, ThirdWednesday, Twentieth, TwentiethIMM, Zero).</description>
          </Parameter>
          <Parameter name='PaymentBDC' default='"Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention.</description>
          </Parameter>
          <Parameter name='Redemption' default='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>redemption value.</description>
          </Parameter>
          <Parameter name='FirstDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>stub date, if there is an irregular starting period.</description>
          </Parameter>
          <Parameter name='NextToLastDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>stub date, if there an irregular final period.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='CALFuturesRateHelperConvexityAdjustment' type='QuantLib::FuturesRateHelper'>
      <description>returns the convexity adjustment for the given FuturesRateHelper object.</description>
      <libraryFunction>convexityAdjustment</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Spread</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='CALFuturesRateHelper'>
      <libraryFunction>FuturesRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Price' exampleValue='95.9285'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>price quote.</description>
          </Parameter>
          <Parameter name='IMM' exampleValue='H2'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>IMM date (or code).</description>
          </Parameter>
          <Parameter name='IborIndex' default='"Euribor3M"'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>IborIndex object ID.</description>
          </Parameter>
          <Parameter name='ConvexityAdjQuote' exampleValue='0.0'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>convexity adjustment quote (i.e. Forward rate = Futures rate - convexity adjustment).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALFuturesRateHelper2'>
      <libraryFunction>FuturesRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Price' exampleValue='95.9285'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>price quote.</description>
          </Parameter>
          <Parameter name='IMM' exampleValue='H2'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>IMM date (or code).</description>
          </Parameter>
          <Parameter name='LengthInMonths' default='3'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>future contract length in months.</description>
          </Parameter>
          <Parameter name='Calendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET).</description>
          </Parameter>
          <Parameter name='Convention' default='"Modified Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>business day convention (e.g. Modified Following).</description>
          </Parameter>
          <Parameter name='EndOfMonth' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>End of Month rule (TRUE for end of month to end of month termination date, FALSE otherwise).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/360"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>DayCounter ID.</description>
          </Parameter>
          <Parameter name='ConvexityAdjQuote' exampleValue='0.0'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>convexity adjustment quote (i.e. Forward rate = Futures rate - convexity adjustment).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='CALFuturesRateHelper3'>
      <libraryFunction>FuturesRateHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Price' exampleValue='95.9285'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>price quote.</description>
          </Parameter>
          <Parameter name='IMM' exampleValue='H2'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>IMM date (or code).</description>
          </Parameter>
          <Parameter name='EndDate' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>end date.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/360"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>DayCounter ID.</description>
          </Parameter>
          <Parameter name='ConvexityAdjQuote' exampleValue='0.0'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>convexity adjustment quote (i.e. Forward rate = Futures rate - convexity adjustment).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Procedure name='CALRateHelperSelection'>
      <description>selects rate helpers for bootstrapping.</description>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
	<!--SupportedPlatform name='Calc'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RateHelpers'>
            <type>QuantLibAddin::RateHelper</type>
            <tensorRank>vector</tensorRank>
            <description>vector of RateHelper IDs.</description>
          </Parameter>
          <Parameter name='Priority'>
            <type>QuantLib::Natural</type>
            <tensorRank>vector</tensorRank>
            <description>vector of priority integers (higher number for higher priority).</description>
          </Parameter>
          <Parameter name='NImmFutures'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>max number of IMM (March, June, September, December) Futures to be included.</description>
          </Parameter>
          <Parameter name='NSerialFutures'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>max number of Serial (January, February, April, May, July, August, October, November) Futures to be included.</description>
          </Parameter>
          <Parameter name='FutureRollDays' default='2'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>discard the front Futures the given number of (positive) days before its expiry (e.g zero implies the use of the front Futures during its expiry day).</description>
          </Parameter>
          <Parameter name='DepoInclusion' default='"AllDepos"'>
            <type>QuantLibAddin::RateHelper::DepoInclusionCriteria</type>
            <tensorRank>scalar</tensorRank>
            <description>Depo inclusion criteria.</description>
          </Parameter>
          <Parameter name='MinDistance' default='1'>
            <type>QuantLib::Natural</type>
            <tensorRank>vector</tensorRank>
            <description>minimum distance in (positive) days from near instruments.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLibAddin::RateHelper</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='CALRateHelperRate'>
      <description>returns the rate (if any) associated to a rate helper.</description>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RateHelper'>
            <type>QuantLibAddin::RateHelper</type>
            <tensorRank>scalar</tensorRank>
            <description>RateHelper ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

  </Functions>
</Category>
